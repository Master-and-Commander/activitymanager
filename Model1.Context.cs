//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Octopus
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class octopusEntities1 : DbContext
    {
        public octopusEntities1()
            : base("name=octopusEntities1")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<activity> activities { get; set; }
        public virtual DbSet<activitytracker> activitytrackers { get; set; }
        public virtual DbSet<challenge> challenges { get; set; }
        public virtual DbSet<quiz> quizs { get; set; }
        public virtual DbSet<quizquestion> quizquestions { get; set; }
        public virtual DbSet<user> users { get; set; }
    
        public virtual int insertQuiz(string quizname, Nullable<int> quizcount, string quizdescription, ObjectParameter identity)
        {
            var quiznameParameter = quizname != null ?
                new ObjectParameter("quizname", quizname) :
                new ObjectParameter("quizname", typeof(string));
    
            var quizcountParameter = quizcount.HasValue ?
                new ObjectParameter("quizcount", quizcount) :
                new ObjectParameter("quizcount", typeof(int));
    
            var quizdescriptionParameter = quizdescription != null ?
                new ObjectParameter("quizdescription", quizdescription) :
                new ObjectParameter("quizdescription", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("insertQuiz", quiznameParameter, quizcountParameter, quizdescriptionParameter, identity);
        }
    
        public virtual ObjectResult<selectQuizzes_Result> selectQuizzes()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<selectQuizzes_Result>("selectQuizzes");
        }
    
        public virtual ObjectResult<selectActivities_Result> selectActivities()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<selectActivities_Result>("selectActivities");
        }
    
        public virtual int insertQuestionToQuiz(Nullable<int> entryid, string entryquestion, string entryanswer, string entryoptions, string entrytype)
        {
            var entryidParameter = entryid.HasValue ?
                new ObjectParameter("entryid", entryid) :
                new ObjectParameter("entryid", typeof(int));
    
            var entryquestionParameter = entryquestion != null ?
                new ObjectParameter("entryquestion", entryquestion) :
                new ObjectParameter("entryquestion", typeof(string));
    
            var entryanswerParameter = entryanswer != null ?
                new ObjectParameter("entryanswer", entryanswer) :
                new ObjectParameter("entryanswer", typeof(string));
    
            var entryoptionsParameter = entryoptions != null ?
                new ObjectParameter("entryoptions", entryoptions) :
                new ObjectParameter("entryoptions", typeof(string));
    
            var entrytypeParameter = entrytype != null ?
                new ObjectParameter("entrytype", entrytype) :
                new ObjectParameter("entrytype", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("insertQuestionToQuiz", entryidParameter, entryquestionParameter, entryanswerParameter, entryoptionsParameter, entrytypeParameter);
        }
    
        public virtual ObjectResult<getQuizQuestions_Result> getQuizQuestions(Nullable<int> quizid)
        {
            var quizidParameter = quizid.HasValue ?
                new ObjectParameter("quizid", quizid) :
                new ObjectParameter("quizid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getQuizQuestions_Result>("getQuizQuestions", quizidParameter);
        }
    }
}
